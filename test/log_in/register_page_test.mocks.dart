// Mocks generated by Mockito 5.4.0 from annotations
// in bank_ui_design/test/log_in/register_page_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:ui' as _i3;

import 'package:bank_ui_design/provider/user_detailed_register_provider.dart'
    as _i2;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

/// A class which mocks [RegisterUserProvider].
///
/// See the documentation for Mockito's code generation for more information.
class MockRegisterUserProvider extends _i1.Mock
    implements _i2.RegisterUserProvider {
  MockRegisterUserProvider() {
    _i1.throwOnMissingStub(this);
  }

  @override
  bool get isCheckBoxChecked => (super.noSuchMethod(
        Invocation.getter(#isCheckBoxChecked),
        returnValue: false,
      ) as bool);
  @override
  set isCheckBoxChecked(bool? _isCheckBoxChecked) => super.noSuchMethod(
        Invocation.setter(
          #isCheckBoxChecked,
          _isCheckBoxChecked,
        ),
        returnValueForMissingStub: null,
      );
  @override
  bool get isButtonEnabled => (super.noSuchMethod(
        Invocation.getter(#isButtonEnabled),
        returnValue: false,
      ) as bool);
  @override
  set isButtonEnabled(bool? _isButtonEnabled) => super.noSuchMethod(
        Invocation.setter(
          #isButtonEnabled,
          _isButtonEnabled,
        ),
        returnValueForMissingStub: null,
      );
  @override
  bool get passwordVisible => (super.noSuchMethod(
        Invocation.getter(#passwordVisible),
        returnValue: false,
      ) as bool);
  @override
  bool get hasListeners => (super.noSuchMethod(
        Invocation.getter(#hasListeners),
        returnValue: false,
      ) as bool);
  @override
  void togglePasswordVisibility() => super.noSuchMethod(
        Invocation.method(
          #togglePasswordVisibility,
          [],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void toggleCheckBox() => super.noSuchMethod(
        Invocation.method(
          #toggleCheckBox,
          [],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void addListener(_i3.VoidCallback? listener) => super.noSuchMethod(
        Invocation.method(
          #addListener,
          [listener],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void removeListener(_i3.VoidCallback? listener) => super.noSuchMethod(
        Invocation.method(
          #removeListener,
          [listener],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void dispose() => super.noSuchMethod(
        Invocation.method(
          #dispose,
          [],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void notifyListeners() => super.noSuchMethod(
        Invocation.method(
          #notifyListeners,
          [],
        ),
        returnValueForMissingStub: null,
      );
}
